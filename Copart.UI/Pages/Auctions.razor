@page "/auctions"

@inject ILotApi LotApi
@inject NavigationManager NavigationManager

<PageTitle>Auctions</PageTitle>

<MudPaper Class="p-4" Elevation="0">

    <MudText Typo="Typo.h5" Class="mb-2">Live Auctions</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Warning" />
    }
    else if (lots?.Any() == true)
    {
        <MudText Typo="Typo.subtitle2" Class="mb-2">@($"{lots.Count()} lots found")</MudText>

        <MudDataGrid Items="@lots" Loading="isLoading" Hover="true" Dense="true" Bordered="true" Breakpoint="Breakpoint.Sm">
            <Columns>
                <PropertyColumn Property="x => x.LotNumber" Title="Lot #" />
                <PropertyColumn Property="x => x.StartDate.ToString()" Title="Start" />
                <PropertyColumn Property="x => x.EndDate.ToString()" Title="Finish" />
                <PropertyColumn Property="x => x.CurrentBid" Title="Current Bid" />
                <PropertyColumn Property="x => x.Vehicle.Model" Title="Vehicle Model" />
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => NavigateToLot(context.Item)">
                            Details
                        </MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true">
            No auctions available at this time.
        </MudAlert>
    }

</MudPaper>

@code {
    private List<LotModel> lots = new();
    private bool isLoading = true;
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadLotsAsync();
        StartAutoRefresh();
    }

    private async Task LoadLotsAsync()
    {
        try
        {
            lots = (await LotApi.GetAll()).ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading lots: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartAutoRefresh()
    {
        timer = new Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private void NavigateToLot(LotModel lot)
    {
        NavigationManager.NavigateTo($"/lotdetail/{lot.LotNumber}");
    }
}
