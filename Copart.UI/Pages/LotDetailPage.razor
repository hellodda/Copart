@page "/lotdetail/{lotNum}"
@using Copart.UI.Models.BidModels
@using Microsoft.AspNetCore.SignalR.Client
@inject ILotApi LotApi
@inject ISnackbar Snackbar

<MudPaper Class="lot-detail-paper" Style="padding: 24px; max-width:800px; margin:auto;">

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (lot is not null)
    {
        <MudText Typo="Typo.h4" GutterBottom="true">Lot #@lot.LotNumber</MudText>
        <MudText Typo="Typo.h5" GutterBottom="true">@lot.Vehicle.Make @lot.Vehicle.Model</MudText>

        if (lot.IsActive)
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Success">Status: Active</MudText>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">Status: Closed</MudText>
        }


        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Current Bid: @lot.CurrentBid.ToString("C")</MudText>

        <MudDivider Class="my-4" />

        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="amount"
                Label="Enter Your Bid"
                Variant="Variant.Filled"
                Type="number"
                Adornment="Adornment.End"
                AdornmentText="$"
                Immediate="true"
                Style="width: 100%;" />
            </MudItem>



            <MudItem xs="12" md="6" Class="d-flex align-items-center">
                <MudButton OnClick="PlaceBid"
                Color="Color.Primary"
                Variant="Variant.Filled"
                Disabled="!IsValidBid"
                Style="margin-top: 8px;">
                    Submit Bid
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h6">Highest Bid</MudText>
        @if (biggestBid is not null)
        {
            <MudPaper Class="pa-3 my-2" Style="background-color: #f5f5f5;">
                <MudText><b>Amount:</b> @biggestBid.Amount.ToString("C")</MudText>
                <MudText><b>User:</b> User #@biggestBid.UserId</MudText>
            </MudPaper>
        }
        else
        {
            <MudText>No bids yet.</MudText>
        }

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.h6">All Bids</MudText>
        @if (bids.Any())
        {
            <MudTable Items="bids" Dense="true" Elevation="0" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>User ID</MudTh>
                    <MudTh>Amount</MudTh>
                    <MudTh>Time</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="User">@context.UserId</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText>No bids found for this lot.</MudText>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Error">Lot not found.</MudAlert>
    }

</MudPaper>

@code {
    [Parameter] public string lotNum { get; set; } = default!;
    private HubConnection _connection = default!;
    private LotModel? lot;
    private List<BidModel> bids = new();
    private BidModel? biggestBid;
    private bool isLoading = true;
    private int amount;

    //-------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        await LoadLot();
        await Setup();
    }

    //-------------------------------------------------

    private bool IsValidBid => amount > 0;

    private async Task Setup()
    {
        _connection = new HubConnectionBuilder()
      .WithUrl("https://localhost:7043/bidsHub")
      .WithAutomaticReconnect()
      .Build();

        _connection.On<string>("ReceiveMessage", async (message) =>
        {
            if (message.ToLower() == "ab")
            {
                await LoadLot();
                StateHasChanged();
            }
        });

        await _connection.StartAsync();
    }

    private async Task LoadLot()
    {
        try
        {
            lot = await LotApi.GetLotByNumber(lotNum);

            if (lot is null)
            {
                Snackbar.Add("Lot not found.", Severity.Error);
                return;
            }

            bids = (await LotApi.GetAllBids(lot.Id)).ToList();
            biggestBid = await LotApi.GetBiggestBid(lot.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PlaceBid()
    {
        if (lot is null || !lot.IsActive)
        {
            Snackbar.Add("Lot not working", Severity.Error);
            return;
        }

        try
        {
            await LotApi.AddBid(lot.Id, new BidAddModel
                {
                    Amount = amount,
                    LotId = lot.Id,
                    UserId = 4 
                });
            await _connection.SendAsync("SendMessage", "ab");

            Snackbar.Add("Bid successfully placed!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error placing bid: {ex.Message}", Severity.Error);
        }
    }
}
