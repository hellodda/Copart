@page "/search/{query}"
@inject ISearchApi SearchApi

<MudPaper Class="p-4" Elevation="0">

    <MudText Typo="Typo.h5" Class="mb-2">Search results for "@query"</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Warning" />
    }
    else if (result.Any())
    {
        <MudText Typo="Typo.subtitle2" Class="mb-2">@($"{result.Count()} results found")</MudText>

        <MudDataGrid Items="result" Loading="isLoading" Hover="true" Dense="true" Bordered="true" Breakpoint="Breakpoint.Sm">
            <Columns>
                <PropertyColumn Property="x => x.Make" Title="Make" />
                <PropertyColumn Property="x => x.Model" Title="Model" />
                <PropertyColumn Property="x => x.Vin" Title="VIN" />
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true">
            No vehicles found matching your search query.
        </MudAlert>
    }

</MudPaper>

@code {
    [Parameter] public string query { get; set; } = default!;

    private List<VehicleModel> result = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            result = (await SearchApi.Search(query)).ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading search results: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
